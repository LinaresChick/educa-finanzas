<?php
namespace Models;

require_once __DIR__ . '/../core/Modelo.php';

class PagoModel extends \Core\Modelo {
    protected $allowedFields;

    public function __construct() {
        parent::__construct('pagos', 'id_pago');
        $this->allowedFields = [
            'id_estudiante',
            'concepto',
            'banco',
            'monto',
            'metodo_pago',
            'fecha_pago',
            'descuento',
            'aumento',
            'observaciones',
            'foto_baucher',
            'usuario_registro'
        ];
    }

    public function crear($datos) {
        try {
            // Asegurémonos de que los campos requeridos estén presentes
            $camposRequeridos = ['id_estudiante', 'concepto', 'banco', 'monto', 'metodo_pago', 'fecha_pago'];
            foreach ($camposRequeridos as $campo) {
                if (!isset($datos[$campo]) || empty($datos[$campo])) {
                    throw new \Exception("El campo {$campo} es requerido");
                }
            }

            // Establecer valores por defecto para descuento y aumento
            if (!isset($datos['descuento']) || $datos['descuento'] === '') {
                $datos['descuento'] = 0;
            }
            if (!isset($datos['aumento']) || $datos['aumento'] === '') {
                $datos['aumento'] = 0;
            }

            // Intentar insertar el registro
            error_log("Intentando insertar pago con datos: " . print_r($datos, true));
            
            $id = $this->insertar($datos);
            
            if (!$id) {
                error_log("Error al insertar pago: No se obtuvo ID");
                throw new \Exception("No se pudo obtener el ID del pago insertado");
            }

            return $id;
        } catch (\Exception $e) {
            error_log("Error al crear pago: " . $e->getMessage());
            error_log("Datos del pago: " . print_r($datos, true));
            throw $e;
        }
    }

    public function obtenerPagosConEstudiantes() {
        try {
            $sql = "SELECT 
                    p.*,
                    e.nombres,
                    e.apellidos,
                    CONCAT(e.nombres, ' ', e.apellidos) as estudiante_nombre_completo,
                    (p.monto + COALESCE(p.aumento, 0) - COALESCE(p.descuento, 0)) as monto_estudiante,
                    DATE_FORMAT(p.fecha_pago, '%Y-%m-%d') as fecha_vencimiento,
                    CASE 
                        WHEN p.id_pago IS NOT NULL THEN 'Pagado'
                        ELSE 'Pendiente'
                    END as estado_pago,
                    FORMAT(p.monto + COALESCE(p.aumento, 0) - COALESCE(p.descuento, 0), 2) as monto_formateado
                   FROM pagos p 
                   INNER JOIN estudiantes e ON p.id_estudiante = e.id_estudiante 
                   ORDER BY p.fecha_pago DESC";
            return $this->db->query($sql)->fetchAll(\PDO::FETCH_ASSOC);
        } catch (\Exception $e) {
            error_log("Error al obtener pagos con estudiantes: " . $e->getMessage());
            throw $e;
        }
    }

    public function contarPagos() {
        try {
            $sql = "SELECT COUNT(*) as total FROM pagos";
            $resultado = $this->db->query($sql)->fetch(\PDO::FETCH_ASSOC);
            return $resultado['total'];
        } catch (\Exception $e) {
            error_log("Error al contar pagos: " . $e->getMessage());
            throw $e;
        }
    }

    public function calcularIngresoMensual() {
        try {
            $sql = "SELECT COALESCE(SUM(monto + COALESCE(aumento, 0) - COALESCE(descuento, 0)), 0) as total 
                   FROM pagos 
                   WHERE YEAR(fecha_pago) = YEAR(CURRENT_DATE()) 
                   AND MONTH(fecha_pago) = MONTH(CURRENT_DATE())";
            $resultado = $this->db->query($sql)->fetch(\PDO::FETCH_ASSOC);
            return floatval($resultado['total']);
        } catch (\Exception $e) {
            error_log("Error al calcular ingreso mensual: " . $e->getMessage());
            throw $e;
        }
    }

    public function contarPagosPendientes() {
        try {
            // Esta consulta cuenta los estudiantes que no han realizado pagos en el mes actual
            $sql = "SELECT COUNT(DISTINCT e.id_estudiante) as total
                   FROM estudiantes e
                   LEFT JOIN pagos p ON e.id_estudiante = p.id_estudiante 
                   AND YEAR(p.fecha_pago) = YEAR(CURRENT_DATE())
                   AND MONTH(p.fecha_pago) = MONTH(CURRENT_DATE())
                   WHERE p.id_pago IS NULL
                   AND e.estado = 'activo'";
            
            $resultado = $this->db->query($sql)->fetch(\PDO::FETCH_ASSOC);
            return intval($resultado['total']);
        } catch (\Exception $e) {
            error_log("Error al contar pagos pendientes: " . $e->getMessage());
            throw $e;
        }
    }

    public function obtenerUltimosPagos($limite = 5) {
        try {
            $sql = "SELECT p.*, 
                          e.nombres, 
                          e.apellidos,
                          DATE_FORMAT(p.fecha_pago, '%d/%m/%Y') as fecha_formateada,
                          FORMAT(p.monto + COALESCE(p.aumento, 0) - COALESCE(p.descuento, 0), 2) as monto_total
                   FROM pagos p 
                   INNER JOIN estudiantes e ON p.id_estudiante = e.id_estudiante 
                   ORDER BY p.fecha_pago DESC, p.id_pago DESC 
                   LIMIT :limite";
            
            $stmt = $this->db->prepare($sql);
            $stmt->bindValue(':limite', $limite, \PDO::PARAM_INT);
            $stmt->execute();
            
            return $stmt->fetchAll(\PDO::FETCH_ASSOC);
        } catch (\Exception $e) {
            error_log("Error al obtener últimos pagos: " . $e->getMessage());
            throw $e;
        }
    }

    public function eliminar($id_pago) {
        try {
            // Primero obtener el registro para verificar si existe y obtener la ruta del voucher
            $pago = $this->buscarPorId($id_pago);
            if (!$pago) {
                throw new \Exception("El pago no existe");
            }

            // Si hay un voucher, eliminarlo
            if (!empty($pago['foto_baucher'])) {
                $rutaVoucher = __DIR__ . '/../public/uploads/vouchers/' . $pago['foto_baucher'];
                if (file_exists($rutaVoucher)) {
                    unlink($rutaVoucher);
                }
            }

            // Eliminar el registro de la base de datos
            $sql = "DELETE FROM pagos WHERE id_pago = :id_pago";
            $stmt = $this->db->prepare($sql);
            $stmt->bindValue(':id_pago', $id_pago, \PDO::PARAM_INT);
            
            if (!$stmt->execute()) {
                throw new \Exception("Error al eliminar el pago de la base de datos");
            }

            return true;
        } catch (\Exception $e) {
            error_log("Error al eliminar pago: " . $e->getMessage());
            throw $e;
        }
    }
}